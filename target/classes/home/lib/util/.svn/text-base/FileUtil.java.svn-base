package _sst.util;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.File;
import java.util.ArrayList;

/**
 * <p>Title: </p>
 *
 * <p>Description: </p>
 *
 * <p>Copyright: Copyright (c) 2007</p>
 *
 * <p>Company: </p>
 *
 * @author not attributable
 * @version 1.0
 */
public class FileUtil {
    public FileUtil() {
    }

    /**
     *
     * @param src String
     * @param dest String
     * @throws IOException
     */
    public static int CopyFile(String src, String dest) {
        // Use unbuffered streams, because we're going to use a large buffer
        // for this sequential io.
        try {
            FileInputStream input = new FileInputStream(src);
            FileOutputStream output = new FileOutputStream(dest);

            int bytesRead;
            byte[] buffer = new byte[256 * 1024];
            while ((bytesRead = input.read(buffer, 0, buffer.length)) > 0) {
                output.write(buffer, 0, bytesRead);

            }
            input.close();
            output.close();

            long lm=new File(src).lastModified();
            new File(dest).setLastModified( lm );
            return 1;
        } catch(Exception e) {
            e.printStackTrace();
        }

        return 0;
    }


    /**
       _splitpath (refer to win32)
     */
    public static String[] _splitpath(String pathname) {

        String[] strl = new String[4];
        int length = pathname.length();
        String dr = "";
        String path = "";
        String name = "";
        String ext = "";
        char separatorChar = File.separatorChar;

        if (pathname.trim().length() == 0)
            return strl;

        if (separatorChar == '\\') {
            pathname = pathname.replace('/', separatorChar);
        } else
        if (separatorChar == '/') {
            pathname = pathname.replace('\\', separatorChar);
        }

        int dp = pathname.indexOf(":");
        if (dp != -1) {
            dp++;
            dr = pathname.substring(0, dp); // c:
        }
        if (dp == -1) {
            dp = 0;
        }

        int pp = pathname.lastIndexOf(separatorChar);
        if (pp != -1 && dp <= pp) {
            pp++;
            path = pathname.substring(dp, pp); //      /abc/cd/
            //System.out.println("xxx:"+dp+" "+pp);
        }
        if (pp == -1) { //case:(c:name.exe)
            pp = dp;

        }

        int dot = pathname.lastIndexOf('.');
        if (dot != -1 && pp <= dot) {
            if (pp != dot) {
                name = pathname.substring(pp, dot); // name
            }
            ext = pathname.substring(dot, length); // .exe
        } else {
            if (pp != length) {
                name = pathname.substring(pp, length); // name
            }
        }

        strl[0] = dr;
        strl[1] = path;
        strl[2] = name;
        strl[3] = ext;
        return strl;
    }

    /**
     *
     * @param pathname String
     * @return String
     */
    public static String extract_dirname(String pathname) {
        String[] sl=_splitpath( pathname);
        if( sl==null)
            return null;
        return sl[0]+sl[1];
    }

    /**
     *
     * @param pathname String
     * @return String
     */
    public static String extract_filename(String pathname) {
           String[] sl=_splitpath( pathname);
           if( sl==null)
               return null;
           return sl[2]+sl[3];
    }


    /**
     *
     * @param mask String
     * @param fstr String
     * @return boolean
     */
    public static boolean cmpLikeName(String mask,String fstr) {
         int i,n;

         //System.out.print( mask+"     "+fstr+"    :");

         //
         //split
         String co="";//collect
         ArrayList<String> al=new ArrayList<String>();
         for(i=0;i<mask.length();i++) {


            char ch=(char)mask.charAt(i);
            if( i>=1 && (char)mask.charAt(i-1)=='*' && ch=='*')
               continue;//ignore


            if( ch=='*') {
               if(co.length()!=0) {
                  al.add( co );
                  co="";
               }
               al.add( new Character(ch).toString() );
            } else {
               co+=new Character(ch).toString();
            }


         }
         if(co.length()!=0) {
            al.add( co );
         }
         String[]arr=al.toArray(new String[1]);

         int findst=0;
         for(i=0;i<arr.length;i++) {

            String c=arr[i];
            //System.out.println( "c : "+c );
            if( c.equals("*"))
               continue;

            int p=fstr.indexOf( c,findst);

            if( i==0 && p!=0) //abd*...=-abc fail!
               return false;

            if( i==0 && p==0)//abc...
               continue;

           if (i == arr.length - 1 && p == (fstr.length() - c.length())) { //...abc
               continue;
           } else if (i >= 1 && p != -1) { //*abc...
               findst = p;
               continue;
           }

            //System.out.println(" xxx  "+i+" "+arr.length+ " " + p + " "+ (fstr.length()-c.length()) );


            if(p==-1) {
               return false;
            }
         }//for



         return true;
   }







}//class
