package _sst.net.netqueue2;

import java.net.*;
import java.util.*;
import _sst.cplusplus.*;
import java.io.*;
import _sst.util.ByteArrayUtil;
import _sst.net.net_common;



/**
 *
 * <p>Title: </p>
 *
 * <p>Description: </p>
 *
 * <p>Copyright: Copyright (c) 2007</p>
 *
 * <p>Company: </p>
 *
 * @author not attributable
 * @version 1.0
 */
class NqCommonDef extends net_common {
    public NqCommonDef() {
    }


}

/**
 *
 * <p>Title: </p>
 *
 * <p>Description: </p>
 *
 * <p>Copyright: Copyright (c) 2007</p>
 *
 * <p>Company: </p>
 *
 * @author not attributable
 * @version 1.0
 */

class NqByteBufferWrap {

    public NqByteBufferWrap() {
    }

    public NqByteBufferWrap(int size) {
        buf = new byte[size + 1];
        len = size;
    }

    int realloc(int size) {
        buf = new byte[size];
        len = size;
        return size;
    }

    public byte[] buf = new byte[10];
    public int len = 10;
};


class NqStreamPacketHeader {
    public NqStreamPacketHeader() {}


    /**
     * use at recv
     */
    byte[] buffer;
    int sending_number = 0;

    byte[]reserve1;


    public static int headSize() {
        return 20;
    }
    /**
     *
     * @param htext String
     * @param data byte[]
     * @param size int
     * @param sn int
     * @return byte[]
     */
    public static byte[] writeBytes(String htext, byte[] data, int size, int sn,byte[] reserve1) {

        std_stream2 stm = new std_stream2();

        byte[] ht = htext.getBytes();

        //System.out.println("test : " + ht.length );

        //head
        stm.writeBytes(ht, 7);
        stm.writeInt(size);
        stm.writeByte((byte) 's');
        stm.writeInt(sn);
        stm.writeBytes(reserve1,4);

        //data
        if (size!=0) {
            stm.writeBytes(data, size);
        }
        //tail
        stm.writeBytes(ht, 7);
        stm.writeInt(size);
        stm.writeByte((byte) 'e');
        stm.writeInt(sn);
        stm.writeBytes(reserve1,4);

        return stm.toByteArray();
    }


    /**
     *
     * @param htext String
     * @param buf byte[]
     * @param bufLen int
     * @return int
     */
    public int readBytes(String htext, byte[] buf, int bufLen) {

        //check front,tail
        if (bufLen < headSize() * 2)
            return -1;

        std_stream2 stm = new std_stream2(buf);
        stm.setPos(0);

        //char* ok = "ulib-ng";
        //char* ok2 = "ulib-nr";
        byte[] ht = htext.getBytes();

        //front
        byte[] sht = stm.readBytes(7);
        if (Arrays.equals(ht, sht) == false)
            return -2;

        int len = stm.readInt();
        byte f = stm.readByte();
        if (f != 's')
            return -3;

        int sn = stm.readInt();

        byte[]rev1=stm.readBytes(4);

        //data
        if (len > (bufLen - headSize() * 2))
            return -4; //buffer over

        //data
        if( len>0) {
            this.buffer = stm.readBytes(len);
        } else {
            this.buffer=new byte[0];
        }


        byte[] eht = stm.readBytes(7);
        if (Arrays.equals(ht, eht) == false)
            return -5;

        int len2 = stm.readInt();
        byte f2 = stm.readByte();
        if (f2 != 'e')
            return -6;
        int sn2 = stm.readInt();
        byte[]rev2=stm.readBytes(4);

        if (sn != sn2 || len != len2)
            return -7;

        if( Arrays.equals(rev1,rev2)==false)
            return -7;

        this.sending_number = sn;
        this.reserve1=rev1;

        return len;
    }


    /**
     *
     * @param buf byte[]
     * @param bufLen int
     * @return int
     */
    public static int checkBytes( byte[] buf, int bufLen) {

        //check front,tail
        if (bufLen < headSize() * 2)
            return -1;

        std_stream2 stm = new std_stream2(buf);
        stm.setPos(0);

        //char* ok = "ulib-ng";
        //char* ok2 = "ulib-nr";


        byte[] ht = "ulib-ng".getBytes();
        byte[] ht2 = "ulib-nr".getBytes();

        //front
        byte[] sht = stm.readBytes(7);
        if (Arrays.equals(ht, sht) == false && Arrays.equals(ht2, sht) == false)
            return -2;

        int len = stm.readInt();
        byte f = stm.readByte();
        if (f != 's')
            return -3;

        int sn = stm.readInt();
        byte[]rev1=stm.readBytes(4);

        //data
        if (len > (bufLen - headSize() * 2))
            return -4; //buffer over

        //data
        stm.movePos( len);//jump


        byte[] eht = stm.readBytes(7);
        if (Arrays.equals(ht, eht) == false && Arrays.equals(ht2, eht) == false)
            return -5;

        int len2 = stm.readInt();
        byte f2 = stm.readByte();
        if (f2 != 'e')
            return -6;
        int sn2 = stm.readInt();
        byte[]rev2=stm.readBytes(4);

        if (sn != sn2 || len != len2)
            return -7;
        if( Arrays.equals(rev1,rev2)==false)
            return -7;



        return (len+ headSize() * 2);
    }


    /**
     *
     * @param buf byte[]
     * @param bufLen int
     * @return int
     */
    public static int rightPacket(byte[] buf, int bufLen) {
        int r = checkBytes(buf,bufLen);
        //System.out.println(" rightpacket : "+ r );

        if (r == -2 || r == -3 ||
            r == -5 || r == -6 || r == -7
                ) {
            return 0;
        }
        return 1;
    }

}

